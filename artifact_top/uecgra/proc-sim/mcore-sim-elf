#!/usr/bin/env python
#=========================================================================
# proc-sim-elf [options] <elf-binary>
#=========================================================================
# This simulator can be used to execute ELF binaries on the processor.
#
#  -h --help           Display this message
#
#  --ncores            Number of cores: {1,2,4,8,16}
#  --trace             Display line tracing
#  --limit             Set max number of cycles, default=100000
#  --stats             Output stats about execution
#  --perf-interval     If non-zero, reports the simulator performance for
#                      given interval of simulated cycles.
#  --perf-out          Specifies an output file to write the performance
#                      results.
#
#  <elf-binary>        Elf binary file for TinyRV2 ISA
#
# Processor Implementations:
#  --single-cycle-mul  Use single-cycle multiplier (default is variable
#                      latency multiplier)
#
# Author : Shunning Jiang, Christopher Batten
# Date   : May 18, 2017

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.expandvars('$RGALS_TOP') + '/src'
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random
from functools import reduce

random.seed(0xdeadbeef)

from proc.SparseMemoryImage import SparseMemoryImage
from proc.tinyrv2_encoding  import assemble
from pymtl3 import *

from pymtl3.stdlib.ifcs  import InValRdyIfc, OutValRdyIfc
from pymtl3.passes.backends.sverilog import TranslationImportPass, ImportConfigs
from proc.TestMemory  import TestMemoryRTL
from proc.Proc import Proc

import elf

#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print( "\n ERROR: %s" % msg )
    print( "" )
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help", action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--ncores",  type=int, choices=[1,2,4,8,16,32,64], required=True )
  p.add_argument( "--trace",   action="store_true"      )
  p.add_argument( "--limit",   default=1000000, type=int )
  p.add_argument( "--stats",   action="store_true"      )
  p.add_argument( "--perf-interval", default=0, type=int )
  p.add_argument( "--perf-out", default="", type=str )
  p.add_argument( "--single-cycle-mul", action="store_true" )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#=========================================================================
# TestHarness
#=========================================================================

class TestHarness( Component ):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def construct( s, num_cores, mul_mode ):

    # Proc/Mngr Interface

    s.mngr2proc = [ InValRdyIfc ( Bits32 ) for _ in range(num_cores) ]
    s.proc2mngr = [ OutValRdyIfc( Bits32 ) for _ in range(num_cores) ]

    s.commit_inst = OutPort( mk_bits(num_cores) )

    # stats_en

    s.stats_en    = OutPort( Bits1 )

    # Memory

    s.mem   = TestMemoryRTL( num_cores*2,
                            [Bits77]*(num_cores*2),
                            [Bits47]*(num_cores*2), 1<<28 ) # 256 MB
    # Processors

    s.proc = [ Proc( num_cores, mul_mode )(
                mngr2proc = s.mngr2proc[i], proc2mngr = s.proc2mngr[i],
                imemreq = s.mem.reqs[i], imemresp = s.mem.resps[i],
                dmemreq = s.mem.reqs[num_cores+i], dmemresp = s.mem.resps[num_cores+i],
                commit_inst = s.commit_inst[i],
              )
              for i in range(num_cores) ]

    for i in range( num_cores ):
      s.proc[i].core_id //= i

    # Only bring up proc0's stats_en
    s.stats_en //= s.proc[0].stats_en

  #-----------------------------------------------------------------------
  # load memory image
  #-----------------------------------------------------------------------

  def load( self, mem_image ):
    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # line trace
  #-----------------------------------------------------------------------

  def line_trace( s ):
    return ("- " if s.stats_en else "  ") + \
           "|".join( [ x.line_trace() for x in s.proc ] ) # no mem trace because it is too long ...

#=========================================================================
# Main
#=========================================================================

def main():
  try:
    import pypyjit
    pypyjit.set_param("off")
  except:
    pass

  import timeit
  start_time = timeit.default_timer()

  opts = parse_cmdline()
  opts.ncores = int(opts.ncores)

  #-----------------------------------------------------------------------
  # Load the elf file and we don't need hacky binary rewriting anymore!
  #-----------------------------------------------------------------------

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf.elf_reader( file_obj )

  #-----------------------------------------------------------------------
  # Setup simulator
  #-----------------------------------------------------------------------

  # Get multiplier mode
  if opts.single_cycle_mul:
    mul_mode = 'single_cycle'
  else:
    mul_mode = 'varlat'

  # Create test harness and elaborate

  model = TestHarness( opts.ncores, mul_mode )

  model.elaborate()

  model.proc[0].sverilog_translate_import = True
  model.proc[0].config_sverilog_import = ImportConfigs(
      vl_trace = True,
  )

  model = TranslationImportPass()( model )

  model.apply( SimulationPass() )

  # Load the program into the model

  model.load( mem_image )

  #-----------------------------------------------------------------------
  # Run the simulation
  #-----------------------------------------------------------------------

  num_cycles = 0
  count      = 0
  perf_interval = opts.perf_interval
  next_perf_measurement_count = perf_interval
  perf_measurement_idx = 0
  # Create the measurement array ahead of time and cap the number of
  # samples to limit the performance impact.
  perf_measurements = [0] * 10000
  commit_inst = [ 0 ] * opts.ncores
  total_inst = 0

  # Storage for extra three messages on failure

  app_fail_xtra       = False
  app_fail_xtra_count = 0
  app_fail_xtra_msgs  = [ None, None, None ]

  # Storage for print

  app_print           = False
  app_print_type      = None  # 0: int, 1: char, 2: string

  model.sim_reset()

  try:
    pypyjit.set_param("default")
    pypyjit.set_param("trace_limit=100000000")
  except:
    pass
  end_time = timeit.default_timer()

  print( "Elaboration time: %.2f sec" % (end_time - start_time) )

  start_time = timeit.default_timer()

  proc2mngr = model.proc2mngr[0]

  # We are always ready to accept a proc2mngr message

  proc2mngr.rdy = Bits1(1)

  last_time = start_time
  while count< 1000000:
    count = count + 1

    if perf_interval != 0 and count == next_perf_measurement_count:
      if len( perf_measurements ) > perf_measurement_idx:
        perf_measurements[ perf_measurement_idx ] = x = timeit.default_timer()
        next_perf_measurement_count += perf_interval
        perf_measurement_idx += 1

        print( "{:.2f}".format( perf_interval/(x-last_time) ) )
        last_time = x

    # Update cycle count
    num_cycles  += model.stats_en.uint()

    if model.stats_en:
      for i in range(opts.ncores):
        if model.commit_inst[i]:
          commit_inst[i] += 1

    # Check the proc2mngr interface

    if proc2mngr.val:
      msg = Bits32( proc2mngr.msg )

      msg_type = msg[16:32]
      msg_xtra = msg[ 0:16]

      # First we check if we are gathering app_fail_xtra_msgs

      if app_fail_xtra:
        app_fail_xtra_msgs[ app_fail_xtra_count ] = msg[0:32]
        app_fail_xtra_count += 1
        if app_fail_xtra_count == 3:
          print( "" )
          print( "  [ FAILED ] dest[{0}] != ref[{0}] ({1} != {2})" \
                  .format( app_fail_xtra_msgs[0].uint(),
                           app_fail_xtra_msgs[1].uint(),
                           app_fail_xtra_msgs[2].uint() ) )
          print( "" )
          exit(1)

      # Then we check if we are doing a print

      elif app_print:

        # Print int

        if app_print_type == 0:
          print( msg[0:32].uint(), end="" )
          app_print = False

        if app_print_type == 1:
          print( chr(msg[0:32].uint()), end="" )
          app_print = False

        if app_print_type == 2:
          char_as_num = msg[0:32].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end="" )
          else:
            app_print = False

      # Message is from an assembly test

      elif msg_type == 0:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          print( "" )
          print( "  [ FAILED ] error on line {}".format(msg_xtra.uint()) )
          print( "" )
          exit(1)

      # Message is from a bmark

      elif msg_type == 1:

        if msg_xtra == 0:
          break
        else:
          exit( msg_xtra.uint() )

      # Message is from a bmark

      elif msg_type == 2:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          app_fail_xtra = True

      # Message is from print

      elif msg_type == 3:
        app_print = True
        app_print_type = msg_xtra
        if app_print_type not in [0,1,2]:
          print( "ERROR: received unrecognized app print type!" )
          exit(1)

    model.tick()

    # Generate line trace

    if opts.trace:
      print( "{}: {}".format( count, model.line_trace() ) )


  end_time = timeit.default_timer()

  #-----------------------------------------------------------------------
  # Post processing
  #-----------------------------------------------------------------------

  # Force a test failure if we timed out

  # if count >= opts.limit:
    # print( """
   # ERROR: Exceeded maximum number of cycles ({}). Your
   # application might be in an infinite loop, or you need to use the
   # --limit command line option to increase the limit.
    # """.format(opts.limit) )
    # exit(1)

  # Display stats

  def reduce_add( arr ):
    return reduce(lambda x,y:x+y, arr)

  if opts.stats:
    print( "---------- Stats_en Region ----------" )
    print( "  num_cycles             =", num_cycles )
    print( "  total_committed_inst   = {}".format( reduce_add(commit_inst) ) )
    print( "  total_cpi              = {:.2f}".format( 1.0*num_cycles/reduce_add(commit_inst) ) )
    print()

    for i in range(opts.ncores):
      print( "  core{}_committed_inst   = {}".format( i, commit_inst[i] ) )
      print( "  core{}_cpi              = {:.2f}".format( i, 1.0*num_cycles/commit_inst[i] ) )

  if perf_interval != 0:
    print()
    print( "---------- Simulation performance intervals ----------" )
    print( "CPS reported for every {} cycles".format( perf_interval ), end="" )
    if opts.perf_out == "":
      print( "below:" )
      out_file = None
    else:
      print( "in {}".format( opts.perf_out ) )
      out_file = open( opts.perf_out, "w" )
      out_file.write( "cycle,cps,\n" )

    interval_start_time = start_time
    for i in range( perf_measurement_idx ):
      interval_end_time = perf_measurements[i]
      interval_time = interval_end_time - interval_start_time
      interval_cps = perf_interval / interval_time
      if out_file:
        out_file.write( "{},{:.2f},\n".format( (i + 1) * perf_interval, interval_cps ) )
      else:
        print( "{:.2f}".format( interval_cps ) )
      interval_start_time = interval_end_time

    if out_file:
      out_file.close()
    print()

  print()
  print( "---------- Simulation performance ----------" )
  print( "- Total cycles   : %d cycles" % count )
  print( "- Execution time : %.5f seconds" % (end_time - start_time) )
  print( "- Cycle/second   : %.2f cps" % (count/(end_time - start_time)) )
  print()

  exit(0)

main()

